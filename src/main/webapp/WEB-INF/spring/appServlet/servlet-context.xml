<?xml version="1.0" encoding="UTF-8"?>
<beans:beans
	xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:util="http://www.springframework.org/schema/util"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:websocket="http://www.springframework.org/schema/websocket"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd
		http://www.springframework.org/schema/websocket http://www.springframework.org/schema/websocket/spring-websocket-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="1" />
	</beans:bean>

	<!-- viewresolver -->
	<beans:bean id="viewResolver"
		class="org.springframework.web.servlet.view.UrlBasedViewResolver">
		<beans:property name="viewClass">
			<beans:value>org.springframework.web.servlet.view.tiles2.TilesView
			</beans:value>
		</beans:property>
	</beans:bean>

	<beans:bean
		class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<beans:property name="order" value="2" />
	</beans:bean>
	
	<!-- tiles -->
	<beans:bean id="tilesconfigurer"
		class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
		<beans:property name="definitions">
			<beans:list>
				<beans:value>classpath:/tiles-config.xml</beans:value>
			</beans:list>
		</beans:property>
	</beans:bean>

	<!-- 채팅 -->

	<websocket:handlers allowed-origins="*">
		<websocket:mapping handler="ChatHandler"
			path="/chat" />
		<websocket:handshake-interceptors>
			<beans:bean class="com.sku.jaebbom.chat.ChatHandshakeInterceptor" />
		</websocket:handshake-interceptors>
		<websocket:sockjs websocket-enabled="true" />
	</websocket:handlers>
	<beans:bean id="ChatHandler" class="com.sku.jaebbom.chat.ChatHandler" />


	<beans:bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<!-- 파일업로드 용량 (10MB) -->
		<beans:property name="maxUploadSize" value="100000000" /><!-- 
			최대 업로드 가능한 바이트 크기 -->
		<beans:property name="maxInMemorySize"
			value="100000000" /><!-- 디스크에 임시 파일을 생성하기 전에 메모리에 보관할 수 있는 최대 바이트 크기 -->
		<beans:property name="defaultEncoding" value="UTF-8" />
	</beans:bean>

	<beans:bean id="uploadPath" class="java.lang.String">
		<beans:constructor-arg
			value="F:/jeabbom/workspace/jaebbom/src/main/resources/uploaded/" />
	</beans:bean>

	<!-- 로그인 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/user/login.do" />
			<beans:bean id="loginInterceptor" class="com.sku.jaebbom.common.interceptor.LoginInterceptor"></beans:bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 권한 검사 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/talent/talentRegPage.do" />
			<mvc:mapping path="/talent/talentUpdatePage.do" />
			<mvc:mapping path="/talent/talentDeletePage.do" />
			<mvc:mapping path="/talent/reviewRegPage.do" />
			<mvc:mapping path="/talent/reviewDelete.do" />
			<mvc:mapping path="/notice/noticeRegPage.do" />
			<mvc:mapping path="/notice/noticeUpdatePage.do" />
			<mvc:mapping path="/notice/noticeDeletePage.do" />
			<mvc:mapping path="/main/reprotPage.do" />
			<mvc:mapping path="/chat/chat.do" />
			<beans:bean id="Sessionrceptor"
				class="com.sku.jaebbom.common.interceptor.SessionInterceptor"></beans:bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<!-- 객체를 자동으로 만들 기본 패키지 지정 : 기본 패키지 아래의 특정하게 정의해 놓은 클래스를 자동 생성한다. -->
	<context:component-scan
		base-package="com.sku.jaebbom" />





</beans:beans>
